{"ast":null,"code":"import _defineProperty from \"/Volumes/CustomDrive/Coding/PROJECTS/GITHUB/Restaurant-ReactApp/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Volumes/CustomDrive/Coding/PROJECTS/GITHUB/Restaurant-ReactApp/src/context.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\"; // import items from \"./data\";\n\nimport Client from \"./Contentful\";\nconst RoomContext = React.createContext();\nexport default class RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true,\n      type: \"all\",\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getData = async () => {\n      try {\n        let response = await Client.getEntries({\n          content_type: \"restaurant\",\n          order: '-sys.createdAt' // order: 'fields.price'\n\n        });\n        console.log(response);\n        let rooms = this.formatData(response.items);\n        let featuredRooms = rooms.filter(room => room.featured === true);\n        let maxPrice = Math.max(...rooms.map(item => item.price));\n        let maxSize = Math.max(...rooms.map(item => item.size));\n        this.setState({\n          rooms,\n          featuredRooms,\n          sortedRooms: rooms,\n          loading: false,\n          //\n          price: maxPrice,\n          maxPrice,\n          maxSize\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      const name = target.name;\n      console.log(name, value);\n      this.setState({\n        [name]: value\n      }, this.filterRooms);\n    };\n\n    this.filterRooms = () => {\n      let _this$state = this.state,\n          rooms = _this$state.rooms,\n          type = _this$state.type,\n          capacity = _this$state.capacity,\n          price = _this$state.price,\n          minSize = _this$state.minSize,\n          maxSize = _this$state.maxSize,\n          breakfast = _this$state.breakfast,\n          pets = _this$state.pets;\n      let tempRooms = [...rooms]; // transform values\n      // get capacity\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); // filter by type\n\n      if (type !== \"all\") {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } // filter by capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } // filter by price\n\n\n      tempRooms = tempRooms.filter(room => room.price <= price); //filter by size\n\n      tempRooms = tempRooms.filter(room => room.size >= minSize && room.size <= maxSize); //filter by breakfast\n\n      if (breakfast) {\n        tempRooms = tempRooms.filter(room => room.breakfast === true);\n      } //filter by pets\n\n\n      if (pets) {\n        tempRooms = tempRooms.filter(room => room.pets === true);\n      }\n\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getData(); // Local\n    // let rooms = this.formatData(items);\n    // let featuredRooms = rooms.filter(room => room.featured === true);\n    // let maxPrice = Math.max(...rooms.map(item => item.price));\n    // let maxSize = Math.max(...rooms.map(item => item.size));\n    // this.setState({\n    //   rooms,\n    //   featuredRooms,\n    //   sortedRooms: rooms,\n    //   loading: false,\n    //   price: maxPrice,\n    //   maxPrice,\n    //   maxSize\n    // });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url); // console.log('https:' + images)\n\n      let room = _objectSpread({}, item.fields, {\n        images,\n        id\n      }); // console.log(room);  \n\n\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return React.createElement(RoomContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nconst RoomConsumer = RoomContext.Consumer;\nexport { RoomProvider, RoomConsumer, RoomContext };\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return React.createElement(RoomConsumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, value => React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    })));\n  };\n}","map":{"version":3,"sources":["/Volumes/CustomDrive/Coding/PROJECTS/GITHUB/Restaurant-ReactApp/src/context.js"],"names":["React","Component","Client","RoomContext","createContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","loading","type","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","pets","getData","response","getEntries","content_type","order","console","log","formatData","items","filter","room","featured","Math","max","map","item","size","setState","error","getRoom","slug","tempRooms","find","handleChange","event","target","value","checked","name","filterRooms","parseInt","componentDidMount","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import items from \"./data\";\nimport Client from \"./Contentful\";\nconst RoomContext = React.createContext();\n\nexport default class RoomProvider extends Component {\n  state = {\n    rooms: [],\n    sortedRooms: [],\n    featuredRooms: [],\n    loading: true,\n    type: \"all\",\n    capacity: 1,\n    price: 0,\n    minPrice: 0,\n    maxPrice: 0,\n    minSize: 0,\n    maxSize: 0,\n    breakfast: false,\n    pets: false\n  };\n\n// getData\n  getData = async () => {\n    try {\n      let response = await Client.getEntries({\n        content_type: \"restaurant\",\n        order: '-sys.createdAt'\n        // order: 'fields.price'\n      });\n      console.log(response);\n\n      let rooms = this.formatData(response.items);\n      let featuredRooms = rooms.filter(room => room.featured === true);\n      \n      let maxPrice = Math.max(...rooms.map(item => item.price));\n      let maxSize = Math.max(...rooms.map(item => item.size));\n      this.setState({\n        rooms,\n        featuredRooms,\n        sortedRooms: rooms,\n        loading: false,\n        //\n        price: maxPrice,\n        maxPrice,\n        maxSize\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  componentDidMount() {\n    this.getData();\n    \n    \n    // Local\n    // let rooms = this.formatData(items);\n    // let featuredRooms = rooms.filter(room => room.featured === true);\n\n    // let maxPrice = Math.max(...rooms.map(item => item.price));\n    // let maxSize = Math.max(...rooms.map(item => item.size));\n    // this.setState({\n    //   rooms,\n    //   featuredRooms,\n    //   sortedRooms: rooms,\n    //   loading: false,\n    //   price: maxPrice,\n    //   maxPrice,\n    //   maxSize\n    // });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n  \n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      \n      // console.log('https:' + images)\n      let room = { ...item.fields,images,id };\n      // console.log(room);  \n      return room;\n    });\n    return tempItems;\n  }\n  getRoom = slug => {\n    let tempRooms = [...this.state.rooms];\n    const room = tempRooms.find(room => room.slug === slug);\n    return room;\n  };\n  handleChange = event => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    console.log(name, value);\n\n    this.setState(\n      {\n        [name]: value\n      },\n      this.filterRooms\n    );\n  };\n  filterRooms = () => {\n    let {\n      rooms,\n      type,\n      capacity,\n      price,\n      minSize,\n      maxSize,\n      breakfast,\n      pets\n    } = this.state;\n\n    let tempRooms = [...rooms];\n    // transform values\n    // get capacity\n    capacity = parseInt(capacity);\n    price = parseInt(price);\n    // filter by type\n    if (type !== \"all\") {\n      tempRooms = tempRooms.filter(room => room.type === type);\n    }\n    // filter by capacity\n    if (capacity !== 1) {\n      tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n    }\n    // filter by price\n    tempRooms = tempRooms.filter(room => room.price <= price);\n    //filter by size\n    tempRooms = tempRooms.filter(\n      room => room.size >= minSize && room.size <= maxSize\n    );\n    //filter by breakfast\n    if (breakfast) {\n      tempRooms = tempRooms.filter(room => room.breakfast === true);\n    }\n    //filter by pets\n    if (pets) {\n      tempRooms = tempRooms.filter(room => room.pets === true);\n    }\n    this.setState({\n      sortedRooms: tempRooms\n    });\n  };\n  render() {\n    return (\n      <RoomContext.Provider\n        value={{\n          ...this.state,\n          getRoom: this.getRoom,\n          handleChange: this.handleChange\n        }}\n      >\n        {this.props.children}\n      </RoomContext.Provider>\n    );\n  }\n}\nconst RoomConsumer = RoomContext.Consumer;\n\nexport { RoomProvider, RoomConsumer, RoomContext };\n\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return (\n      <RoomConsumer>\n        {value => <Component {...props} context={value} />}\n      </RoomConsumer>\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}